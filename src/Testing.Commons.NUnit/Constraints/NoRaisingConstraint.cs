using System;
using NUnit.Framework.Constraints;

namespace Testing.Commons.NUnit.Constraints
{
	/// <summary>
	/// Base class for constraints for types not raising events.
	/// </summary>
	/// <typeparam name="TSubject">Type that does not raise the event.</typeparam>
	/// <typeparam name="TEventArgs">The type of the event data that would be generated by the event.</typeparam>
	public abstract class NoRaisingConstraint<TSubject, TEventArgs> : Constraint where TEventArgs : EventArgs
	{
		/// <summary>
		/// Instance of the event raising type.
		/// </summary>
		protected TSubject Subject { get; private set; }
		private bool _eventRaised;

		/// <summary>
		/// Name of the event.
		/// </summary>
		protected abstract string EventName { get; }

		/// <summary>
		/// Instantiate the constraint
		/// </summary>
		/// <param name="subject"> Instance of the event not raised by the type.</param>
		protected NoRaisingConstraint(TSubject subject)
		{
			Subject = subject;
		}

		/// <summary>
		/// To be executed inside the callback of the event.
		/// </summary>
		/// <param name="e">The event data generated by the event.</param>
		protected void OnEventRaised(TEventArgs e)
		{
			_eventRaised = true;
		}

		/// <summary>
		/// Test whether the constraint is satisfied by a given value.
		/// </summary>
		/// <param name="current">The value to be tested</param>
		/// <returns>True for success, false for failure</returns>
		public override bool Matches(object current)
		{
			return !_eventRaised;
		}

		/// <summary>
		/// Write the constraint description to a MessageWriter.
		/// </summary>
		/// <param name="writer">The writer on which the description is displayed.</param>
		public override void WriteDescriptionTo(MessageWriter writer)
		{
			writer.Write(string.Format("event '{0}' not raised", EventName));
		}

		/// <summary>
		/// Write the actual value for a failing constraint test to a
		/// MessageWriter. The default implementation simply writes
		/// the raw value of actual, leaving it to the writer to
		/// perform any formatting.
		/// </summary>
		/// <param name="writer">The writer on which the actual value is displayed</param>
		public override void WriteActualValueTo(MessageWriter writer)
		{
			writer.Write(string.Format("event '{0}' raised", EventName));
		}
	}
}