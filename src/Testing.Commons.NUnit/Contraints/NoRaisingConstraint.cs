using NUnit.Framework.Constraints;

namespace Testing.Commons.NUnit.Constraints;

/// <summary>
/// Base class for constraints for types not raising events.
/// </summary>
/// <typeparam name="TSubject">Type that does not raise the event.</typeparam>
/// <typeparam name="TEventArgs">The type of the event data that would be generated by the event.</typeparam>
public abstract class NoRaisingConstraint<TSubject, TEventArgs> : Constraint where TEventArgs : EventArgs
{
	/// <summary>
	/// Instance of the event raising type.
	/// </summary>
	protected TSubject Subject { get; private set; }
	private bool _eventRaised;

	/// <summary>
	/// Name of the event.
	/// </summary>
	protected abstract string EventName { get; }

	/// <summary>
	/// Instantiate the constraint
	/// </summary>
	/// <param name="subject"> Instance of the event not raised by the type.</param>
	protected NoRaisingConstraint(TSubject subject)
	{
		Subject = subject;
	}

	/// <summary>
	/// To be executed inside the callback of the event.
	/// </summary>
	/// <param name="e">The event data generated by the event.</param>
	protected void OnEventRaised(TEventArgs e)
	{
		_eventRaised = true;
	}

	/// <summary>
	/// Applies the constraint to an actual value, returning a ConstraintResult.
	/// </summary>
	/// <param name="actual">The value to be tested</param>
	/// <returns>A ConstraintResult</returns>
	public override ConstraintResult ApplyTo<TActual>(TActual actual)
	{
		return new NoRaisingResult(EventName, this, actual, !_eventRaised);
	}

	/// <summary>
	/// The Description of what this constraint tests, for
	/// use in messages and in the ConstraintResult.
	/// </summary>
	public override string Description => $"event '{EventName}' not raised";


	class NoRaisingResult : ConstraintResult
	{
		private readonly string _eventName;
		public NoRaisingResult(string eventName, IConstraint constraint, object actualValue, bool isSuccess) : base(constraint, actualValue, isSuccess)
		{
			_eventName = eventName;
		}

		public override void WriteActualValueTo(MessageWriter writer)
		{
			writer.Write("event '{0}' raised", _eventName);
		}
	}
}
